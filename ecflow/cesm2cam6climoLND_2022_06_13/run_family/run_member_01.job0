#!/usr/bin/env bash  
#PBS -N run_member_01
#PBS -r n
#PBS -j oe
#PBS -o /glade/u/home/ssfcst/cesm2cam6climoLND/CESM2-Realtime-Forecast/ecflow/cesm2cam6climoLND_2022_06_13/log/run_member_01.out
#PBS -S /bin/bash
#PBS -l select=10:ncpus=128:mpiprocs=128:ompthreads=1:mem=230GB
#PBS -q main
#PBS -A CESM0021
#PBS -l walltime=04:00:00
#PBS -V
set -e          # stop the shell on first error
set -u          # fail when using an undefined variable
set -x          # echo script lines as they are executed
set -o pipefail # fail if last(rightmost) command exits with a non-zero status
 
# Defines the variables that are needed for any communication with ECF
export ECF_PORT=${ECF_PORT:=3141}    # The server port number
export ECF_HOST=${ECF_HOST:=localhost}    # The host name where the server is running
export ECF_NAME=/cesm2cam6climoLND_2022_06_13/run_family/run_member_01    # The name of this current task
export ECF_PASS=OiNAN0mr    # A unique password, used for job validation & zombie detection
export ECF_TRYNO=0  # Current try number of the task
export ECF_RID=$$             # record the process id. Also used for zombie detection
export FCST_HOME=/glade/u/home/ssfcst/cesm2cam6climoLND/CESM2-Realtime-Forecast
export FCST_WORK=/glade/work/ssfcst/derecho/cases/cesm2cam6climoLND_2022_06_13
export CESM_ROOT=/glade/u/home/ssfcst/cesm2.1.5
export CESM_WORKFLOW=cesm2cam6climoLND

#source /etc/profile.d/z00_modules.sh
module load cesmdev/1.0 ncarenv/23.09 ecflow
module use /glade/u/home/ssfcst/cesm2cam6climoLND/CESM2-Realtime-Forecast/modulefiles
module load cesm2cam6climoLND
  
# export NO_ECF=1             # uncomment to run as a standalone task on the command line
# Optionally define the path where to find ecflow_client
# make sure client and server use the *same* version.
# Important when there are multiple versions of ecFlow
# export PATH=/where/i/install/ecflow/5.8.3/bin:$PATH
 
# Tell ecFlow we have started
ecflow_client --init=$$
 
 
# Define a error handler
ERROR() {
   set +e                      # Clear -e flag, so we don't fail
   wait                        # wait for background process to stop
   ecflow_client --abort=trap  # Notify ecFlow that something went wrong, using 'trap' as the reason
   trap 0                      # Remove the trap
   exit 0                      # End the script cleanly, server monitors child, an exit 1, will cause another abort and zombie
}
 
 
# Trap any calls to exit and errors caught by the -e flag
trap ERROR 0
 
 
# Trap any signal that may cause the script to fail
trap '{ echo "Killed by a signal"; ERROR ; }' 1 2 3 4 5 6 7 8 10 12 13 15

member=$(echo run_member_01 | cut -c 12-)
echo 2022-06-13 $member
cd /glade/work/ssfcst/derecho/cases/cesm2cam6climoLND_2022_06_13/cesm2cam6climoLND_2022-06-13.$member
./case.submit --job case.run

wait                      # wait for background process to stop
ecflow_client --complete  # Notify ecFlow of a normal end
trap 0                    # Remove all traps
exit 0                    # End the shell